import discord
from discord.ext import commands
import random
import asyncio
import json
import os

TOKEN = (" ") #Your token here

intents = discord.Intents.default()
intents.message_content = True
intents.members = True
bot = commands.Bot(command_prefix='.', intents=intents)

DATA_FILE = "user_data.json"

# Function to load user data from the JSON file
def load_user_data():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞."""
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, "r") as f:
            return json.load(f)
    return {}

def save_user_data():
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–∞–π–ª."""
    with open(DATA_FILE, "w") as f:
        json.dump(user_data, f, indent=4)

def reset_mining_status():
    """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –º–∞–π–Ω–∏–Ω–≥–∞ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    for user_id in user_data:
        user_data[user_id]["mining"] = False
    save_user_data()

# Function to get the user's data
user_data = load_user_data()

# Function to reset mining status
reset_mining_status()

videocards = {
    "GTX550": {"price": 0, "mining_rate": (1, 2)},
    "GTX1080": {"price": 50, "mining_rate": (1, 3)},
    "GTX1650": {"price": 300, "mining_rate": (1, 4)},
    "RTX2060": {"price": 500, "mining_rate": (1, 6)},
    "RTX3060": {"price": 1000, "mining_rate": (1, 9)},
}

async def send_dm(ctx, message):
    """Helper function to send a DM to the user."""
    try:
        await ctx.author.send(message)
    except discord.Forbidden:
        await ctx.send("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –õ–°. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏.")

def get_user_data(user_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –∑–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    if str(user_id) not in user_data:
        user_data[str(user_id)] = {
            "coins": 0,
            "money": 50,
            "videocard": "GTX550",
            "mining": False
        }
        save_user_data()
    return user_data[str(user_id)]

@bot.command(name="me")
async def profile(ctx):
    user = get_user_data(ctx.author.id)
    videocard_display = user["videocard"] if user["videocard"] else "–ù–µ—Ç"
    await send_dm(ctx,
        f"**üí≥ –í–∞—à–µ –∏–º—è:** **{ctx.author.name}**\n"
        f"**üí∏ –í–∞—à –±–∞–ª–∞–Ω—Å:** **{user['money']}$**\n"
        f"**ü™ô –í–∞—à–∏ –∫–æ–∏–Ω—ã:** **{user['coins']}**\n"
        f"**üì∫ –í–∏–¥–µ–æ–∫–∞—Ä—Ç–∞:** **{videocard_display}**"
    )

@bot.command(name="mine")
async def mine(ctx):
    user = get_user_data(ctx.author.id)
    if user["mining"]:
        await send_dm(ctx, "**‚õî –í—ã —É–∂–µ –Ω–∞—á–∞–ª–∏ –º–∞–π–Ω–∏–Ω–≥!**")
        return
    if not user["videocard"]:
        await send_dm(ctx, "**‚ùå –£ –≤–∞—Å –Ω–µ—Ç –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—ã –¥–ª—è –º–∞–π–Ω–∏–Ω–≥–∞! –ö—É–ø–∏—Ç–µ –µ—ë —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã `.shop`.**")
        return
    user["mining"] = True
    save_user_data()
    await send_dm(ctx, "**üíé –í—ã –Ω–∞—á–∞–ª–∏ –º–∞–π–Ω–∏–Ω–≥! –≠—Ç–æ –∑–∞–π–º–µ—Ç 10 —Å–µ–∫—É–Ω–¥.**")
    await asyncio.sleep(10)
    user["mining"] = False
    mined_coins = random.randint(videocards[user["videocard"]]["mining_rate"][0], videocards[user["videocard"]]["mining_rate"][1])
    user["coins"] += mined_coins
    save_user_data()
    await send_dm(ctx, f"**‚úÖ –ú–∞–π–Ω–∏–Ω–≥ –∑–∞–≤–µ—Ä—à—ë–Ω! –í—ã –ø–æ–ª—É—á–∏–ª–∏ {mined_coins}ü™ô. –í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å –∫–æ–∏–Ω–æ–≤: {user['coins']}ü™ô**")

@bot.command(name="buy")
async def buy(ctx, videocard_name):
    user = get_user_data(ctx.author.id)
    if videocard_name not in videocards:
        await send_dm(ctx, "**‚ùå –¢–∞–∫–æ–π –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—ã –Ω–µ—Ç!**")
        return
    if videocards[videocard_name]["price"] > user["money"]:
        await send_dm(ctx,
            f"**‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–æ–ª–ª–∞—Ä–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ {videocard_name}. "
            f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {videocards[videocard_name]['price']}$**"
        )
        return
    user["videocard"] = videocard_name
    user["money"] -= videocards[videocard_name]["price"]
    save_user_data()
    await send_dm(ctx,
        f"**‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ {videocard_name} –∑–∞ {videocards[videocard_name]['price']}$. "
        f"–í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {user['money']}$**"
    )

@bot.command(name="exchange")
async def sell(ctx, amount: int):
    user = get_user_data(ctx.author.id)
    exchange_rate = random.randint(5, 20)
    if amount <= 0:
        await send_dm(ctx, "**‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–∞—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–∏–Ω–æ–≤!**")
        return
    if amount > user["coins"]:
        await send_dm(ctx, f"**‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ–∏–Ω–æ–≤! –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {user['coins']}ü™ô**")
        return
    user["coins"] -= amount
    profit = amount * exchange_rate
    user["money"] += profit
    save_user_data()
    await send_dm(ctx,
        f"**‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–∞–ª–∏ {amount}ü™ô –∑–∞ {profit}$ (–∫—É—Ä—Å: 1 –∫–æ–∏–Ω = {exchange_rate}$).**\n"
        f"**–í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {user['money']}$, –∫–æ–∏–Ω—ã: {user['coins']}ü™ô**"
    )

@bot.command(name="shop")
async def shop(ctx):
    await send_dm(ctx, "**üõí –ú–∞–≥–∞–∑–∏–Ω –≤–∏–¥–µ–æ–∫–∞—Ä—Ç:**\n**1. GTX1080 - 50$ ‚Äî –§–∞—Ä–º 1 - 2 –∫–æ–∏–Ω–æ–≤.**\n**2. GTX1650 - 300$ ‚Äî –§–∞—Ä–º 1 - 3 –∫–æ–∏–Ω–æ–≤.**\n**3. RTX2060 - 500$ ‚Äî —Ñ–∞—Ä–º 1 - 5 –∫–æ–∏–Ω–æ–≤.**\n**4. RTX3060 - 1000$ ‚Äî —Ñ–∞—Ä–º 1 - 8 –∫–æ–∏–Ω–æ–≤.**\n \n**–ß—Ç–æ–±—ã –∫—É–ø–∏—Ç—å –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—É, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `.buy <–Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ–∫–∞—Ä—Ç—ã>`.**")

bot.run(TOKEN)
